-- https://www.sqlite.org/lang_createtable.html#rowid

-- Except for WITHOUT ROWID tables, all rows within SQLite tables have a 64-bit signed integer key that
-- uniquely identifies the row within its table. This integer is usually called the "rowid". The rowid value
-- can be accessed using one of the special case-independent names "rowid", "oid", or "_rowid_" in place
-- of a column name. If a table contains a user defined column named "rowid", "oid" or "_rowid_", then that
-- name always refers the explicitly declared column and cannot be used to retrieve the integer rowid value.

-- The rowid (and "oid" and "_rowid_") is omitted in WITHOUT ROWID tables. WITHOUT ROWID tables are only
-- available in SQLite version 3.8.2 (2013-12-06) and later. A table that lacks the WITHOUT ROWID clause
-- is called a "rowid table".

-- The data for rowid tables is stored as a B-Tree structure containing one entry for each table row,
-- using the rowid value as the key. This means that retrieving or sorting records by rowid is fast.
-- Searching for a record with a specific rowid, or for all records with rowids within a specified range
-- is around twice as fast as a similar search made by specifying any other PRIMARY KEY or indexed value.

-- With one exception noted below, if a rowid table has a primary key that consists of a single column
-- and the declared type of that column is "INTEGER" in any mixture of upper and lower case, then the
-- column becomes an alias for the rowid. Such a column is usually referred to as an "integer primary key".
-- A PRIMARY KEY column only becomes an integer primary key if the declared type name is exactly "INTEGER".
-- Other integer type names like "INT" or "BIGINT" or "SHORT INTEGER" or "UNSIGNED INTEGER" causes the primary
-- key column to behave as an ordinary table column with integer affinity and a unique index, not as an alias
-- for the rowid.
CREATE TABLE Tag (
    id   INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    parent_id  INTEGER DEFAULT NULL,
    FOREIGN KEY (parent_id) REFERENCES Tag(id)
);

CREATE TABLE Note (
    id   INTEGER NOT NULL PRIMARY KEY,
    title TEXT NOT NULL,
    url TEXT,
    image TEXT,
    content TEXT
);
-- https://kotlinlang.org/docs/multiplatform-mobile-ktor-sqldelight.html#generate-the-database-api
CREATE TABLE Notes_Tags(
    note_id INTEGER NOT NULL,
    tag_id INTEGER NOT NULL,
    PRIMARY KEY (note_id, tag_id),
    FOREIGN KEY (note_id) REFERENCES Note(id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES Tag(id) ON DELETE CASCADE
);

removeAllRelations:
DELETE FROM Notes_Tags;

removeAllTags:
DELETE FROM Tag;

removeAllNotes:
DELETE FROM Note;

insertNoteTagRelation:
INSERT INTO Notes_Tags(note_id, tag_id)
VALUES(?, ?);

insertTag:
INSERT INTO Tag(id, name, parent_id)
VALUES(?, ?, ?);

insertNote:
INSERT INTO Note(id, title, url, image, content)
VALUES(?, ?, ?, ?, ?);

deleteNote:
DELETE FROM Note WHERE id = ?;

getAllNotes:
SELECT * FROM Note;

getAllTags:
SELECT * FROM Tag
ORDER BY name ASC;

getTagByName:
SELECT * FROM Tag
WHERE name = ?;

getTagsForNote:
SELECT DISTINCT Tag.id, Tag.name, Tag.parent_id
FROM Tag
JOIN Notes_Tags ON Tag.id = tag_id
JOIN Note ON Notes_Tags.note_id = ?;

getNotesForTag:
SELECT DISTINCT Note.id, Note.title, Note.url, Note.image, Note.content
FROM Note
JOIN Notes_Tags ON Note.id = note_id
JOIN Tag ON Notes_Tags.tag_id = (SELECT id FROM Tag WHERE name = ?);